// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//Node sends his ID at first contact
type Handshake struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Handshake) Reset()         { *m = Handshake{} }
func (m *Handshake) String() string { return proto.CompactTextString(m) }
func (*Handshake) ProtoMessage()    {}
func (*Handshake) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Handshake) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Handshake.Unmarshal(m, b)
}
func (m *Handshake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Handshake.Marshal(b, m, deterministic)
}
func (m *Handshake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Handshake.Merge(m, src)
}
func (m *Handshake) XXX_Size() int {
	return xxx_messageInfo_Handshake.Size(m)
}
func (m *Handshake) XXX_DiscardUnknown() {
	xxx_messageInfo_Handshake.DiscardUnknown(m)
}

var xxx_messageInfo_Handshake proto.InternalMessageInfo

func (m *Handshake) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Handshake) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

//Timeout is the time interval for checking the connection with the Node
type Timeout struct {
	Timeout              int64    `protobuf:"varint,1,opt,name=Timeout,json=timeout,proto3" json:"Timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timeout) Reset()         { *m = Timeout{} }
func (m *Timeout) String() string { return proto.CompactTextString(m) }
func (*Timeout) ProtoMessage()    {}
func (*Timeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *Timeout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timeout.Unmarshal(m, b)
}
func (m *Timeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timeout.Marshal(b, m, deterministic)
}
func (m *Timeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timeout.Merge(m, src)
}
func (m *Timeout) XXX_Size() int {
	return xxx_messageInfo_Timeout.Size(m)
}
func (m *Timeout) XXX_DiscardUnknown() {
	xxx_messageInfo_Timeout.DiscardUnknown(m)
}

var xxx_messageInfo_Timeout proto.InternalMessageInfo

func (m *Timeout) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

//PingMessage is for checking the connection between the Node and the server
type PingMessage struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingMessage) Reset()         { *m = PingMessage{} }
func (m *PingMessage) String() string { return proto.CompactTextString(m) }
func (*PingMessage) ProtoMessage()    {}
func (*PingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *PingMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingMessage.Unmarshal(m, b)
}
func (m *PingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingMessage.Marshal(b, m, deterministic)
}
func (m *PingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingMessage.Merge(m, src)
}
func (m *PingMessage) XXX_Size() int {
	return xxx_messageInfo_PingMessage.Size(m)
}
func (m *PingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PingMessage proto.InternalMessageInfo

func (m *PingMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type LookFor struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookFor) Reset()         { *m = LookFor{} }
func (m *LookFor) String() string { return proto.CompactTextString(m) }
func (*LookFor) ProtoMessage()    {}
func (*LookFor) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *LookFor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookFor.Unmarshal(m, b)
}
func (m *LookFor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookFor.Marshal(b, m, deterministic)
}
func (m *LookFor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookFor.Merge(m, src)
}
func (m *LookFor) XXX_Size() int {
	return xxx_messageInfo_LookFor.Size(m)
}
func (m *LookFor) XXX_DiscardUnknown() {
	xxx_messageInfo_LookFor.DiscardUnknown(m)
}

var xxx_messageInfo_LookFor proto.InternalMessageInfo

func (m *LookFor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Found struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int64    `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Found) Reset()         { *m = Found{} }
func (m *Found) String() string { return proto.CompactTextString(m) }
func (*Found) ProtoMessage()    {}
func (*Found) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *Found) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Found.Unmarshal(m, b)
}
func (m *Found) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Found.Marshal(b, m, deterministic)
}
func (m *Found) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Found.Merge(m, src)
}
func (m *Found) XXX_Size() int {
	return xxx_messageInfo_Found.Size(m)
}
func (m *Found) XXX_DiscardUnknown() {
	xxx_messageInfo_Found.DiscardUnknown(m)
}

var xxx_messageInfo_Found proto.InternalMessageInfo

func (m *Found) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Found) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Found) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func init() {
	proto.RegisterType((*Handshake)(nil), "api.Handshake")
	proto.RegisterType((*Timeout)(nil), "api.Timeout")
	proto.RegisterType((*PingMessage)(nil), "api.PingMessage")
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*LookFor)(nil), "api.LookFor")
	proto.RegisterType((*Found)(nil), "api.Found")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xd3, 0xa4, 0x6d, 0x92, 0xa9, 0x94, 0x32, 0xa7, 0x58, 0x10, 0x64, 0x05, 0x29, 0x1e,
	0xaa, 0x44, 0xf4, 0xe6, 0x4d, 0x63, 0x0f, 0x0a, 0x52, 0x7d, 0x81, 0x91, 0x5d, 0xe2, 0xd2, 0x66,
	0x77, 0x49, 0xb6, 0x87, 0xbe, 0xbd, 0x64, 0x12, 0x8b, 0xd0, 0xde, 0xbe, 0x99, 0xcc, 0x0c, 0xff,
	0x97, 0x85, 0x94, 0x9c, 0x5e, 0xba, 0xda, 0x7a, 0x8b, 0x11, 0x39, 0x2d, 0x6e, 0x21, 0x5d, 0x91,
	0x91, 0xcd, 0x0f, 0x6d, 0x14, 0x4e, 0x21, 0xd4, 0x32, 0x1b, 0x5c, 0x0e, 0x16, 0xe9, 0x3a, 0xd4,
	0x12, 0x11, 0x86, 0xce, 0xd6, 0x3e, 0x0b, 0xb9, 0xc3, 0x2c, 0xae, 0x20, 0xfe, 0xd2, 0x95, 0xb2,
	0x3b, 0x8f, 0xd9, 0x01, 0x79, 0x27, 0x5a, 0xc7, 0xbe, 0x2b, 0xc5, 0x05, 0x4c, 0x3e, 0xb4, 0x29,
	0xdf, 0x55, 0xd3, 0x50, 0x79, 0x74, 0x57, 0xc4, 0x30, 0x7a, 0xa9, 0x9c, 0xdf, 0x8b, 0x73, 0x88,
	0xdf, 0xac, 0xdd, 0x14, 0xb6, 0x3e, 0x9a, 0x79, 0x82, 0x51, 0x61, 0x77, 0x46, 0x9e, 0x0a, 0x65,
	0xa8, 0x52, 0x7f, 0xa1, 0x5a, 0xc6, 0x19, 0x44, 0x54, 0xaa, 0x2c, 0xe2, 0x14, 0x2d, 0xe6, 0x8f,
	0x90, 0xbc, 0xd6, 0x4a, 0x79, 0x6d, 0x4a, 0xbc, 0x81, 0xe4, 0x93, 0xf6, 0x2b, 0xb5, 0xdd, 0x5a,
	0x9c, 0x2e, 0xdb, 0x1f, 0x70, 0x50, 0x9e, 0x9f, 0x71, 0xdd, 0x6b, 0x88, 0x20, 0xbf, 0x83, 0x61,
	0x9b, 0x1c, 0x17, 0x30, 0xee, 0x0c, 0x70, 0xc6, 0x13, 0xff, 0x74, 0xe6, 0xc0, 0x9d, 0xce, 0x20,
	0xc8, 0x1f, 0x60, 0xd2, 0x3b, 0x3c, 0x93, 0x27, 0xbc, 0x86, 0xa4, 0xd0, 0x46, 0x32, 0x77, 0xc7,
	0xfb, 0xaf, 0xfd, 0x1a, 0x4b, 0x89, 0xe0, 0x7b, 0xcc, 0x8f, 0x70, 0xff, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x26, 0x57, 0x60, 0x89, 0x91, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreetingClient is the client API for Greeting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreetingClient interface {
	SayHello(ctx context.Context, in *Handshake, opts ...grpc.CallOption) (*Timeout, error)
}

type greetingClient struct {
	cc *grpc.ClientConn
}

func NewGreetingClient(cc *grpc.ClientConn) GreetingClient {
	return &greetingClient{cc}
}

func (c *greetingClient) SayHello(ctx context.Context, in *Handshake, opts ...grpc.CallOption) (*Timeout, error) {
	out := new(Timeout)
	err := c.cc.Invoke(ctx, "/api.Greeting/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreetingServer is the server API for Greeting service.
type GreetingServer interface {
	SayHello(context.Context, *Handshake) (*Timeout, error)
}

func RegisterGreetingServer(s *grpc.Server, srv GreetingServer) {
	s.RegisterService(&_Greeting_serviceDesc, srv)
}

func _Greeting_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Handshake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Greeting/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingServer).SayHello(ctx, req.(*Handshake))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeting_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Greeting",
	HandlerType: (*GreetingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeting_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// PingClient is the client API for Ping service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingClient interface {
	PingMe(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*Empty, error)
}

type pingClient struct {
	cc *grpc.ClientConn
}

func NewPingClient(cc *grpc.ClientConn) PingClient {
	return &pingClient{cc}
}

func (c *pingClient) PingMe(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Ping/PingMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingServer is the server API for Ping service.
type PingServer interface {
	PingMe(context.Context, *PingMessage) (*Empty, error)
}

func RegisterPingServer(s *grpc.Server, srv PingServer) {
	s.RegisterService(&_Ping_serviceDesc, srv)
}

func _Ping_PingMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServer).PingMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ping/PingMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServer).PingMe(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ping_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Ping",
	HandlerType: (*PingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingMe",
			Handler:    _Ping_PingMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// LookForDataClient is the client API for LookForData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LookForDataClient interface {
	FindData(ctx context.Context, in *LookFor, opts ...grpc.CallOption) (*Found, error)
}

type lookForDataClient struct {
	cc *grpc.ClientConn
}

func NewLookForDataClient(cc *grpc.ClientConn) LookForDataClient {
	return &lookForDataClient{cc}
}

func (c *lookForDataClient) FindData(ctx context.Context, in *LookFor, opts ...grpc.CallOption) (*Found, error) {
	out := new(Found)
	err := c.cc.Invoke(ctx, "/api.LookForData/FindData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LookForDataServer is the server API for LookForData service.
type LookForDataServer interface {
	FindData(context.Context, *LookFor) (*Found, error)
}

func RegisterLookForDataServer(s *grpc.Server, srv LookForDataServer) {
	s.RegisterService(&_LookForData_serviceDesc, srv)
}

func _LookForData_FindData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookFor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookForDataServer).FindData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LookForData/FindData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookForDataServer).FindData(ctx, req.(*LookFor))
	}
	return interceptor(ctx, in, info, handler)
}

var _LookForData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.LookForData",
	HandlerType: (*LookForDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindData",
			Handler:    _LookForData_FindData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
