// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//Node sends his ID at first contact
type NodeInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source               string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeInfo) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type NodesList struct {
	Nodes                []*NodeInfo `protobuf:"bytes,1,rep,name=Nodes,json=nodes,proto3" json:"Nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NodesList) Reset()         { *m = NodesList{} }
func (m *NodesList) String() string { return proto.CompactTextString(m) }
func (*NodesList) ProtoMessage()    {}
func (*NodesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *NodesList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodesList.Unmarshal(m, b)
}
func (m *NodesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodesList.Marshal(b, m, deterministic)
}
func (m *NodesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesList.Merge(m, src)
}
func (m *NodesList) XXX_Size() int {
	return xxx_messageInfo_NodesList.Size(m)
}
func (m *NodesList) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesList.DiscardUnknown(m)
}

var xxx_messageInfo_NodesList proto.InternalMessageInfo

func (m *NodesList) GetNodes() []*NodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

//Timeout is the time interval for checking the connection with the Node
type Timeout struct {
	Timeout              int64    `protobuf:"varint,1,opt,name=Timeout,json=timeout,proto3" json:"Timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timeout) Reset()         { *m = Timeout{} }
func (m *Timeout) String() string { return proto.CompactTextString(m) }
func (*Timeout) ProtoMessage()    {}
func (*Timeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *Timeout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timeout.Unmarshal(m, b)
}
func (m *Timeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timeout.Marshal(b, m, deterministic)
}
func (m *Timeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timeout.Merge(m, src)
}
func (m *Timeout) XXX_Size() int {
	return xxx_messageInfo_Timeout.Size(m)
}
func (m *Timeout) XXX_DiscardUnknown() {
	xxx_messageInfo_Timeout.DiscardUnknown(m)
}

var xxx_messageInfo_Timeout proto.InternalMessageInfo

func (m *Timeout) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

//PingMessage is for checking the connection between the Node and the server
type PingMessage struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingMessage) Reset()         { *m = PingMessage{} }
func (m *PingMessage) String() string { return proto.CompactTextString(m) }
func (*PingMessage) ProtoMessage()    {}
func (*PingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *PingMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingMessage.Unmarshal(m, b)
}
func (m *PingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingMessage.Marshal(b, m, deterministic)
}
func (m *PingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingMessage.Merge(m, src)
}
func (m *PingMessage) XXX_Size() int {
	return xxx_messageInfo_PingMessage.Size(m)
}
func (m *PingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PingMessage proto.InternalMessageInfo

func (m *PingMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type LookFor struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookFor) Reset()         { *m = LookFor{} }
func (m *LookFor) String() string { return proto.CompactTextString(m) }
func (*LookFor) ProtoMessage()    {}
func (*LookFor) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *LookFor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookFor.Unmarshal(m, b)
}
func (m *LookFor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookFor.Marshal(b, m, deterministic)
}
func (m *LookFor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookFor.Merge(m, src)
}
func (m *LookFor) XXX_Size() int {
	return xxx_messageInfo_LookFor.Size(m)
}
func (m *LookFor) XXX_DiscardUnknown() {
	xxx_messageInfo_LookFor.DiscardUnknown(m)
}

var xxx_messageInfo_LookFor proto.InternalMessageInfo

func (m *LookFor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Person struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int64    `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Profession           string   `protobuf:"bytes,3,opt,name=profession,proto3" json:"profession,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Person) Reset()         { *m = Person{} }
func (m *Person) String() string { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()    {}
func (*Person) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *Person) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Person.Unmarshal(m, b)
}
func (m *Person) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Person.Marshal(b, m, deterministic)
}
func (m *Person) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person.Merge(m, src)
}
func (m *Person) XXX_Size() int {
	return xxx_messageInfo_Person.Size(m)
}
func (m *Person) XXX_DiscardUnknown() {
	xxx_messageInfo_Person.DiscardUnknown(m)
}

var xxx_messageInfo_Person proto.InternalMessageInfo

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Person) GetProfession() string {
	if m != nil {
		return m.Profession
	}
	return ""
}

func init() {
	proto.RegisterType((*NodeInfo)(nil), "api.NodeInfo")
	proto.RegisterType((*NodesList)(nil), "api.NodesList")
	proto.RegisterType((*Timeout)(nil), "api.Timeout")
	proto.RegisterType((*PingMessage)(nil), "api.PingMessage")
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*LookFor)(nil), "api.LookFor")
	proto.RegisterType((*Person)(nil), "api.Person")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x6d, 0x29, 0xb4, 0x74, 0x50, 0x42, 0x26, 0xd1, 0x34, 0x24, 0x18, 0xb2, 0x24, 0x8a, 0x17,
	0x62, 0xca, 0xd9, 0x83, 0xdf, 0x31, 0x41, 0x24, 0xd5, 0x83, 0xd7, 0x4a, 0x17, 0xb2, 0x51, 0x76,
	0x9a, 0xdd, 0xc5, 0xc4, 0xbf, 0xe1, 0x2f, 0x36, 0xdd, 0x22, 0x22, 0xe1, 0xe4, 0x6d, 0xde, 0xbc,
	0x99, 0xce, 0x7b, 0xaf, 0x0b, 0x61, 0x9a, 0x8b, 0x41, 0xae, 0xc8, 0x10, 0x7a, 0x69, 0x2e, 0x58,
	0x0c, 0xf5, 0x31, 0x65, 0xfc, 0x5e, 0xce, 0x08, 0x9b, 0x50, 0x11, 0x59, 0xe4, 0x76, 0xdd, 0x7e,
	0x98, 0x54, 0x44, 0x86, 0x87, 0xe0, 0x6b, 0x5a, 0xaa, 0x29, 0x8f, 0x2a, 0xb6, 0xb7, 0x42, 0xec,
	0x0c, 0xc2, 0x62, 0x47, 0x8f, 0x84, 0x36, 0xd8, 0x83, 0x9a, 0x05, 0x91, 0xdb, 0xf5, 0xfa, 0x8d,
	0x78, 0x7f, 0x50, 0x1c, 0xf8, 0xf9, 0x64, 0x52, 0x93, 0x05, 0xc7, 0x7a, 0x10, 0x3c, 0x8b, 0x05,
	0xa7, 0xa5, 0xc1, 0x68, 0x5d, 0xda, 0x4b, 0x5e, 0x12, 0x98, 0x12, 0xb2, 0x0e, 0x34, 0x26, 0x42,
	0xce, 0x1f, 0xb8, 0xd6, 0xe9, 0x9c, 0x6f, 0xab, 0x61, 0x01, 0xd4, 0x6e, 0x16, 0xb9, 0xf9, 0x64,
	0x1d, 0x08, 0x46, 0x44, 0x6f, 0xb7, 0xa4, 0x10, 0xa1, 0x2a, 0xd3, 0x05, 0x5f, 0x4d, 0xd9, 0x9a,
	0x8d, 0xc1, 0x9f, 0x70, 0xa5, 0x49, 0xee, 0x62, 0xb1, 0x05, 0x5e, 0x3a, 0x2f, 0x0d, 0x79, 0x49,
	0x51, 0xe2, 0x11, 0x40, 0xae, 0x68, 0xc6, 0xb5, 0x16, 0x24, 0x23, 0xcf, 0xce, 0x6e, 0x74, 0xe2,
	0x2f, 0x17, 0x82, 0x2b, 0x92, 0x46, 0xd1, 0x3b, 0x9e, 0x40, 0xfd, 0x5a, 0x51, 0x5e, 0xd8, 0xc3,
	0xbf, 0x4e, 0xdb, 0x60, 0x61, 0xa9, 0xd0, 0xc1, 0x53, 0x08, 0x8b, 0x74, 0x6c, 0x32, 0xb8, 0x41,
	0xb5, 0x9b, 0xeb, 0x2d, 0x1b, 0x1f, 0x73, 0x70, 0x08, 0x07, 0x77, 0xdc, 0x3c, 0x4a, 0x5e, 0xaa,
	0xbe, 0x54, 0x94, 0x66, 0xd3, 0x54, 0x1b, 0x6c, 0xd8, 0xd1, 0xb2, 0xdb, 0xde, 0x04, 0xcc, 0x89,
	0xcf, 0xc1, 0x7f, 0xe2, 0xea, 0x83, 0xab, 0xff, 0xad, 0xbf, 0x40, 0xd5, 0x7a, 0x38, 0x86, 0x6a,
	0x11, 0x39, 0xb6, 0x4a, 0xfa, 0x37, 0xfd, 0x2d, 0x3b, 0x7d, 0x08, 0x2e, 0xb2, 0x6c, 0x97, 0xed,
	0x3d, 0x0b, 0x57, 0x7f, 0x94, 0x39, 0xaf, 0xbe, 0x7d, 0x5b, 0xc3, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd2, 0x54, 0x75, 0xaa, 0x68, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlClient interface {
	DropNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Empty, error)
	ListNodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodesList, error)
	GetOnePersonBroadcast(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
}

type controlClient struct {
	cc *grpc.ClientConn
}

func NewControlClient(cc *grpc.ClientConn) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) DropNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Control/DropNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) ListNodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodesList, error) {
	out := new(NodesList)
	err := c.cc.Invoke(ctx, "/api.Control/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetOnePersonBroadcast(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/api.Control/GetOnePersonBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServer is the server API for Control service.
type ControlServer interface {
	DropNode(context.Context, *NodeInfo) (*Empty, error)
	ListNodes(context.Context, *Empty) (*NodesList, error)
	GetOnePersonBroadcast(context.Context, *Person) (*Person, error)
}

func RegisterControlServer(s *grpc.Server, srv ControlServer) {
	s.RegisterService(&_Control_serviceDesc, srv)
}

func _Control_DropNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).DropNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Control/DropNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).DropNode(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Control/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).ListNodes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetOnePersonBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetOnePersonBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Control/GetOnePersonBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetOnePersonBroadcast(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

var _Control_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DropNode",
			Handler:    _Control_DropNode_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _Control_ListNodes_Handler,
		},
		{
			MethodName: "GetOnePersonBroadcast",
			Handler:    _Control_GetOnePersonBroadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerClient interface {
	GetOnePersonBroadcast(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) GetOnePersonBroadcast(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/api.Server/GetOnePersonBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
type ServerServer interface {
	GetOnePersonBroadcast(context.Context, *Person) (*Person, error)
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_GetOnePersonBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetOnePersonBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Server/GetOnePersonBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetOnePersonBroadcast(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOnePersonBroadcast",
			Handler:    _Server_GetOnePersonBroadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*Empty, error)
	AddNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Timeout, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Node/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AddNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Timeout, error) {
	out := new(Timeout)
	err := c.cc.Invoke(ctx, "/api.Node/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	Ping(context.Context, *PingMessage) (*Empty, error)
	AddNode(context.Context, *NodeInfo) (*Timeout, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Node/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AddNode(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Node_Ping_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _Node_AddNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
