syntax = "proto3";
package api;

//Node sends his ID at first contact
message NodeInfo {
  string id = 1;
  string source = 2;
}
message NodesList {
  repeated NodeInfo Nodes = 1;
}
//Timeout is the time interval for checking the connection with the Node
message Timeout {
    int64 Timeout = 1;
}
//PingMessage is for checking the connection between the Node and the server
message PingMessage {
    string id = 1;
  }
message Empty {
}

message Person {
    string name =1;
    int64 age =2;
    string profession = 3;
    string node =4;
}

message MultiPerson {
repeated Person Persons =1;
}


service Control {
  rpc DropNode(NodeInfo) returns (Empty) {}
  rpc ListNodes(Empty) returns (NodesList) {}
  rpc GetOnePersonBroadcast(Person) returns (Person) {}
  rpc GetOnePersonNode(Person) returns (Person) {}
  rpc GetMultiPersonBroadcast(MultiPerson) returns (MultiPerson) {}
  rpc GetMultiPersonNode(MultiPerson) returns (MultiPerson) {}
  rpc DropOnePersonBroadcast(Person) returns (Empty) {}
  rpc DropOnePersonNode(Person) returns (Empty) {}
  rpc DropMultiPersonBroadcast(MultiPerson) returns (Empty) {}
  rpc DropMultiPersonNode(MultiPerson) returns (Empty) {}
  rpc InsertOnePersonNode(Person) returns (Empty) {}
  rpc InsertMultiPersonNode(MultiPerson) returns (Empty) {}
}

service Server {
  rpc GetOnePerson(Person) returns (Person) {}
  rpc GetMultiPerson(MultiPerson) returns (MultiPerson) {}
  rpc DropOnePerson(Person) returns (Empty) {}
  rpc DropMultiPerson(MultiPerson) returns (Empty) {}
  rpc InsertOnePerson(Person) returns (Empty) {}
  rpc InsertMultiPerson(MultiPerson) returns (Empty) {}
}

service Node {
  rpc Ping(PingMessage) returns (Empty) {}
  rpc AddNode(NodeInfo) returns (Timeout) {}
}